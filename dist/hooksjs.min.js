(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["Hooksjs"] = factory();
	else
		root["Hooksjs"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.Hooks = undefined;
	
	var _Hooks2 = __webpack_require__(1);
	
	var _Hooks3 = _interopRequireDefault(_Hooks2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.Hooks = _Hooks3.default;

/***/ },
/* 1 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var Hooks = function () {
	  function Hooks(subject) {
	    _classCallCheck(this, Hooks);
	
	    subject.$pre = {};
	    subject.$post = {};
	    this.subject = subject;
	    // this.subject = Object.getOwnPropertyNames(subject)
	    //   .filter((a) => /^(?!data)/.test(a))
	    //   .reduce((a, b) => Object.assign(a, { [b]: subject[b] }), subject);
	  }
	
	  _createClass(Hooks, [{
	    key: 'pre',
	    value: function pre(type, callback) {
	      if (!this.subject.$pre[type]) {
	        this.subject.$pre[type] = [];
	        this._wrap(this.subject[type], type);
	      }
	
	      this.subject.$pre[type].push(callback);
	
	      return this;
	    }
	  }, {
	    key: 'post',
	    value: function post(type, callback) {
	      if (!this.subject.$post[type]) {
	        this.subject.$post[type] = [];
	        this._wrap(this.subject[type], type);
	      }
	
	      this.subject.$post[type].push(callback);
	
	      return this;
	    }
	  }, {
	    key: '_trigger',
	    value: function _trigger(type, action, args) {
	      var _this = this;
	
	      (this.subject[type][action] || []).map(function (hook) {
	        hook.apply(_this.subject[type][action], args);
	      });
	
	      return Promise.resolve();
	    }
	  }, {
	    key: '_wrap',
	    value: function _wrap(fn, type) {
	      var self = this;
	
	      return this.subject[type] = function () {
	        var _arguments = arguments;
	
	        if (self.subject[type].called) {
	          return false;
	        }
	
	        self.subject[type].called = true;
	
	        return self._trigger('$pre', type, arguments).then(function () {
	          return fn.apply(fn, _arguments);
	        }).then(function () {
	          return self._trigger('$post', type, _arguments);
	        }).then(function () {
	          return self.subject[type].called = false;
	        });
	      };
	    }
	  }]);
	
	  return Hooks;
	}();
	
	exports.default = Hooks;

/***/ }
/******/ ])
});
;
//# sourceMappingURL=hooksjs.min.js.map